# -*- coding: utf-8 -*-
"""Untitled55.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16KVwU4TXUIFlRecWUYrxF_PJAC0iRdur
"""

# app.py
import streamlit as st
import pandas as pd
import joblib

# Load the trained model
model = joblib.load("credit_model.pkl")

# ------------------------------
# 🎨 Streamlit Page Config
st.set_page_config(page_title="Credit Scoring App", page_icon="💳", layout="centered")
st.markdown(
    """
    <h1 style='text-align: center; color: #4CAF50;'>💳 Creditworthiness Predictor</h1>
    <p style='text-align: center;'>Predict whether a customer is likely to have good or bad credit</p>
    <hr>
    """,
    unsafe_allow_html=True
)

# ------------------------------
# 📝 Sidebar
st.sidebar.title("Input Parameters")
st.sidebar.markdown("Please fill the details:")

# ------------------------------
# 📥 User Input Form
def user_input():
    checking_status = st.sidebar.selectbox("Checking Account Status", ['no checking', '<0', '0<=X<200', '>=200'])
    duration = st.sidebar.slider("Duration (months)", 4, 72, 24)
    credit_history = st.sidebar.selectbox("Credit History", ['critical/other existing credit', 'existing paid',
                                                             'delayed previously', 'no credits/all paid', 'all paid'])
    purpose = st.sidebar.selectbox("Purpose", ['radio/tv', 'education', 'furniture/equipment', 'new car',
                                               'used car', 'business', 'domestic appliance', 'repairs', 'other'])
    credit_amount = st.sidebar.number_input("Credit Amount", 250, 20000, 1500)
    savings_status = st.sidebar.selectbox("Savings Status", ['<100', '100<=X<500', '500<=X<1000', '>=1000', 'no known savings'])
    employment = st.sidebar.selectbox("Employment Duration", ['unemployed', '<1', '1<=X<4', '4<=X<7', '>=7'])
    installment_commitment = st.sidebar.slider("Installment Commitment", 1, 4, 2)
    personal_status = st.sidebar.selectbox("Personal Status", ['male single', 'female div/dep/mar', 'male div/sep',
                                                               'male mar/wid'])
    other_parties = st.sidebar.selectbox("Other Parties", ['none', 'guarantor', 'co applicant'])
    residence_since = st.sidebar.slider("Years at Current Residence", 1, 4, 2)
    property_magnitude = st.sidebar.selectbox("Property", ['real estate', 'life insurance', 'car', 'no known property'])
    age = st.sidebar.slider("Age", 18, 75, 35)
    other_payment_plans = st.sidebar.selectbox("Other Payment Plans", ['none', 'bank', 'stores'])
    housing = st.sidebar.selectbox("Housing", ['own', 'for free', 'rent'])
    existing_credits = st.sidebar.slider("Existing Credits", 1, 4, 1)
    job = st.sidebar.selectbox("Job", ['skilled', 'unskilled resident', 'high qualif/self emp/mgmt', 'unemp/unskilled non res'])
    num_dependents = st.sidebar.slider("Number of Dependents", 1, 2, 1)
    own_telephone = st.sidebar.selectbox("Own Telephone", ['yes', 'no'])
    foreign_worker = st.sidebar.selectbox("Foreign Worker", ['yes', 'no'])

    # Feature Engineering
    credit_per_month = credit_amount / (duration + 1)

    data = {
        'checking_status': checking_status,
        'duration': duration,
        'credit_history': credit_history,
        'purpose': purpose,
        'credit_amount': credit_amount,
        'savings_status': savings_status,
        'employment': employment,
        'installment_commitment': installment_commitment,
        'personal_status': personal_status,
        'other_parties': other_parties,
        'residence_since': residence_since,
        'property_magnitude': property_magnitude,
        'age': age,
        'other_payment_plans': other_payment_plans,
        'housing': housing,
        'existing_credits': existing_credits,
        'job': job,
        'num_dependents': num_dependents,
        'own_telephone': own_telephone,
        'foreign_worker': foreign_worker,
        'credit_per_month': credit_per_month
    }

    return pd.DataFrame([data])

# ------------------------------
# 🧠 Prediction
input_df = user_input()

if st.button("🔍 Predict Creditworthiness"):
    prediction = model.predict(input_df)[0]
    proba = model.predict_proba(input_df)[0][1]

    if prediction == 1:
        st.success(f"✅ Prediction: Good Creditworthiness (Confidence: {proba:.2f})")
        st.balloons()
    else:
        st.error(f"❌ Prediction: Bad Creditworthiness (Confidence: {1-proba:.2f})")

# ------------------------------
# 📌 Footer
st.markdown("""
<hr>
<p style='text-align: center;'>Made with 💚 by Maheshwari Kalaskar | AI Credit Scoring App</p>
""", unsafe_allow_html=True)